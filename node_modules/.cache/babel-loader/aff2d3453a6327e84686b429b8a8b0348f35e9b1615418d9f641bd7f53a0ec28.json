{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst ExcelJS = require('exceljs');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\nconst app = express();\napp.use(cors());\nconst upload = multer({\n  dest: 'uploads/'\n});\napp.post('/upload', upload.fields([{\n  name: 'file1'\n}, {\n  name: 'file2'\n}]), async (req, res) => {\n  try {\n    const file1Path = req.files['file1'][0].path;\n    const file2Path = req.files['file2'][0].path;\n    const workbook1 = new ExcelJS.Workbook();\n    const workbook2 = new ExcelJS.Workbook();\n    await workbook1.xlsx.readFile(file1Path);\n    await workbook2.xlsx.readFile(file2Path);\n    const sheet1 = workbook1.worksheets[0];\n    const sheet2 = workbook2.worksheets[0];\n    const emailToEmpCode = {};\n    const file2Headers = {};\n\n    // Read headers from File 2\n    sheet2.getRow(1).eachCell((cell, colNumber) => {\n      file2Headers[cell.text.trim()] = colNumber;\n    });\n    const officialEmailCol2 = file2Headers['Official_Email'];\n    const empCodeCol2 = file2Headers['Employee_Code'];\n    if (!officialEmailCol2 || !empCodeCol2) {\n      return res.status(400).json({\n        error: 'File 2 must have \"Official_Email\" and \"Employee_Code\" columns.'\n      });\n    }\n\n    // Build map: Official_Email => Employee_Code\n    sheet2.eachRow({\n      includeEmpty: false\n    }, (row, i) => {\n      if (i === 1) return; // skip header\n      const email = row.getCell(officialEmailCol2).text.trim();\n      const empCode = row.getCell(empCodeCol2).text.trim();\n      if (email) {\n        emailToEmpCode[email] = empCode;\n      }\n    });\n\n    // Read headers from File 1\n    const file1Headers = {};\n    sheet1.getRow(1).eachCell((cell, colNumber) => {\n      file1Headers[cell.text.trim()] = colNumber;\n    });\n    const emailCol1 = file1Headers['Email address'];\n    if (!emailCol1) {\n      return res.status(400).json({\n        error: 'File 1 must have \"Email address\" column.'\n      });\n    }\n\n    // Insert new column at beginning for Employee_Code\n    sheet1.spliceColumns(1, 0, []);\n    sheet1.getRow(1).getCell(1).value = 'Employee_Code';\n\n    // Fill Employee_Code values in the new column\n    for (let i = 2; i <= sheet1.rowCount; i++) {\n      const row = sheet1.getRow(i);\n      const email = row.getCell(emailCol1 + 1).text.trim(); // +1 due to inserted column\n      row.getCell(1).value = emailToEmpCode[email] || '';\n    }\n    const outputPath = path.join(__dirname, 'uploads', 'output.xlsx');\n    await workbook1.xlsx.writeFile(outputPath);\n    fs.unlinkSync(file1Path);\n    fs.unlinkSync(file2Path);\n    res.download(outputPath, 'matched_output.xlsx', () => {\n      fs.unlinkSync(outputPath);\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Error processing files');\n  }\n});\napp.listen(5000, () => console.log('Server started on http://localhost:5000'));\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [file1, setFile1] = useState(null);\n//   const [file2, setFile2] = useState(null);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!file1 || !file2) return alert(\"Please upload both files\");\n\n//     const formData = new FormData();\n//     formData.append('file1', file1);\n//     formData.append('file2', file2);\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         responseType: 'blob',\n//       });\n\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', 'matched_output.xlsx');\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (err) {\n//       alert('Error processing files');\n//     }\n//   };\n\n//   const containerStyle = {\n//     maxWidth: '500px',\n//     margin: '50px auto',\n//     padding: '30px',\n//     borderRadius: '12px',\n//     background: '#f9f9f9',\n//     boxShadow: '0 4px 20px rgba(0, 0, 0, 0.4)',\n//     fontFamily: 'Arial, sans-serif',\n//   };\n\n//   const headingStyle = {\n//     textAlign: 'center',\n//     marginBottom: '20px',\n//     color: '#333',\n//   };\n\n//   const inputGroup = {\n//     marginBottom: '15px',\n//     display: 'flex',\n//     flexDirection: 'column',\n//   };\n\n//   const labelStyle = {\n//     marginBottom: '8px',\n//     fontWeight: 'bold',\n//   };\n\n//   const inputStyle = {\n//     padding: '8px',\n//     border: '1px solid #ccc',\n//     borderRadius: '6px',\n//   };\n\n//   const buttonStyle = {\n//     marginTop: '10px',\n//     padding: '10px 15px',\n//     backgroundColor: '#007bff',\n//     color: 'white',\n//     border: 'none',\n//     borderRadius: '6px',\n//     cursor: 'pointer',\n//     fontWeight: 'bold',\n//   };\n\n//   return (\n//     <div style={containerStyle}>\n//       <h2 style={headingStyle}>Srifin Excel Merge Files</h2>\n//       <hr style={{ marginBottom: '30px' }} />\n//       <form onSubmit={handleSubmit}>\n//         <div style={inputGroup}>\n//           <label style={labelStyle}>LMS File:</label>\n//           <input type=\"file\" onChange={e => setFile1(e.target.files[0])} style={inputStyle} />\n//         </div>\n//         <div style={inputGroup}>\n//           <label style={labelStyle}>Zing-HR File:</label>\n//           <input type=\"file\" onChange={e => setFile2(e.target.files[0])} style={inputStyle} />\n//         </div>\n//         <div style={{ display: 'flex', justifyContent: 'center' }}>\n//           <button type=\"submit\" style={buttonStyle}>Merge and Download</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":["express","require","multer","ExcelJS","cors","fs","path","app","use","upload","dest","post","fields","name","req","res","file1Path","files","file2Path","workbook1","Workbook","workbook2","xlsx","readFile","sheet1","worksheets","sheet2","emailToEmpCode","file2Headers","getRow","eachCell","cell","colNumber","text","trim","officialEmailCol2","empCodeCol2","status","json","error","eachRow","includeEmpty","row","i","email","getCell","empCode","file1Headers","emailCol1","spliceColumns","value","rowCount","outputPath","join","__dirname","writeFile","unlinkSync","download","err","console","send","listen","log"],"sources":["D:/Excel-Project/src/App.js"],"sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst ExcelJS = require('exceljs');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\napp.use(cors());\n\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.fields([{ name: 'file1' }, { name: 'file2' }]), async (req, res) => {\n    try {\n        const file1Path = req.files['file1'][0].path;\n        const file2Path = req.files['file2'][0].path;\n\n        const workbook1 = new ExcelJS.Workbook();\n        const workbook2 = new ExcelJS.Workbook();\n        await workbook1.xlsx.readFile(file1Path);\n        await workbook2.xlsx.readFile(file2Path);\n\n        const sheet1 = workbook1.worksheets[0];\n        const sheet2 = workbook2.worksheets[0];\n\n        const emailToEmpCode = {};\n        const file2Headers = {};\n\n        // Read headers from File 2\n        sheet2.getRow(1).eachCell((cell, colNumber) => {\n            file2Headers[cell.text.trim()] = colNumber;\n        });\n\n        const officialEmailCol2 = file2Headers['Official_Email'];\n        const empCodeCol2 = file2Headers['Employee_Code'];\n\n        if (!officialEmailCol2 || !empCodeCol2) {\n            return res.status(400).json({ error: 'File 2 must have \"Official_Email\" and \"Employee_Code\" columns.' });\n        }\n\n        // Build map: Official_Email => Employee_Code\n        sheet2.eachRow({ includeEmpty: false }, (row, i) => {\n            if (i === 1) return; // skip header\n            const email = row.getCell(officialEmailCol2).text.trim();\n            const empCode = row.getCell(empCodeCol2).text.trim();\n            if (email) {\n                emailToEmpCode[email] = empCode;\n            }\n        });\n\n        // Read headers from File 1\n        const file1Headers = {};\n        sheet1.getRow(1).eachCell((cell, colNumber) => {\n            file1Headers[cell.text.trim()] = colNumber;\n        });\n\n        const emailCol1 = file1Headers['Email address'];\n        if (!emailCol1) {\n            return res.status(400).json({ error: 'File 1 must have \"Email address\" column.' });\n        }\n\n        // Insert new column at beginning for Employee_Code\n        sheet1.spliceColumns(1, 0, []);\n        sheet1.getRow(1).getCell(1).value = 'Employee_Code';\n\n        // Fill Employee_Code values in the new column\n        for (let i = 2; i <= sheet1.rowCount; i++) {\n            const row = sheet1.getRow(i);\n            const email = row.getCell(emailCol1 + 1).text.trim(); // +1 due to inserted column\n            row.getCell(1).value = emailToEmpCode[email] || '';\n        }\n\n        const outputPath = path.join(__dirname, 'uploads', 'output.xlsx');\n        await workbook1.xlsx.writeFile(outputPath);\n\n        fs.unlinkSync(file1Path);\n        fs.unlinkSync(file2Path);\n\n        res.download(outputPath, 'matched_output.xlsx', () => {\n            fs.unlinkSync(outputPath);\n        });\n    } catch (err) {\n        console.error(err);\n        res.status(500).send('Error processing files');\n    }\n});\n\napp.listen(5000, () => console.log('Server started on http://localhost:5000'));\n\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [file1, setFile1] = useState(null);\n//   const [file2, setFile2] = useState(null);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!file1 || !file2) return alert(\"Please upload both files\");\n\n//     const formData = new FormData();\n//     formData.append('file1', file1);\n//     formData.append('file2', file2);\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         responseType: 'blob',\n//       });\n\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', 'matched_output.xlsx');\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (err) {\n//       alert('Error processing files');\n//     }\n//   };\n\n//   const containerStyle = {\n//     maxWidth: '500px',\n//     margin: '50px auto',\n//     padding: '30px',\n//     borderRadius: '12px',\n//     background: '#f9f9f9',\n//     boxShadow: '0 4px 20px rgba(0, 0, 0, 0.4)',\n//     fontFamily: 'Arial, sans-serif',\n//   };\n\n//   const headingStyle = {\n//     textAlign: 'center',\n//     marginBottom: '20px',\n//     color: '#333',\n//   };\n\n//   const inputGroup = {\n//     marginBottom: '15px',\n//     display: 'flex',\n//     flexDirection: 'column',\n//   };\n\n//   const labelStyle = {\n//     marginBottom: '8px',\n//     fontWeight: 'bold',\n//   };\n\n//   const inputStyle = {\n//     padding: '8px',\n//     border: '1px solid #ccc',\n//     borderRadius: '6px',\n//   };\n\n//   const buttonStyle = {\n//     marginTop: '10px',\n//     padding: '10px 15px',\n//     backgroundColor: '#007bff',\n//     color: 'white',\n//     border: 'none',\n//     borderRadius: '6px',\n//     cursor: 'pointer',\n//     fontWeight: 'bold',\n//   };\n\n//   return (\n//     <div style={containerStyle}>\n//       <h2 style={headingStyle}>Srifin Excel Merge Files</h2>\n//       <hr style={{ marginBottom: '30px' }} />\n//       <form onSubmit={handleSubmit}>\n//         <div style={inputGroup}>\n//           <label style={labelStyle}>LMS File:</label>\n//           <input type=\"file\" onChange={e => setFile1(e.target.files[0])} style={inputStyle} />\n//         </div>\n//         <div style={inputGroup}>\n//           <label style={labelStyle}>Zing-HR File:</label>\n//           <input type=\"file\" onChange={e => setFile2(e.target.files[0])} style={inputStyle} />\n//         </div>\n//         <div style={{ display: 'flex', justifyContent: 'center' }}>\n//           <button type=\"submit\" style={buttonStyle}>Merge and Download</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMK,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMM,GAAG,GAAGP,OAAO,CAAC,CAAC;AACrBO,GAAG,CAACC,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AAEf,MAAMK,MAAM,GAAGP,MAAM,CAAC;EAAEQ,IAAI,EAAE;AAAW,CAAC,CAAC;AAE3CH,GAAG,CAACI,IAAI,CAAC,SAAS,EAAEF,MAAM,CAACG,MAAM,CAAC,CAAC;EAAEC,IAAI,EAAE;AAAQ,CAAC,EAAE;EAAEA,IAAI,EAAE;AAAQ,CAAC,CAAC,CAAC,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3F,IAAI;IACA,MAAMC,SAAS,GAAGF,GAAG,CAACG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAACX,IAAI;IAC5C,MAAMY,SAAS,GAAGJ,GAAG,CAACG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAACX,IAAI;IAE5C,MAAMa,SAAS,GAAG,IAAIhB,OAAO,CAACiB,QAAQ,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAG,IAAIlB,OAAO,CAACiB,QAAQ,CAAC,CAAC;IACxC,MAAMD,SAAS,CAACG,IAAI,CAACC,QAAQ,CAACP,SAAS,CAAC;IACxC,MAAMK,SAAS,CAACC,IAAI,CAACC,QAAQ,CAACL,SAAS,CAAC;IAExC,MAAMM,MAAM,GAAGL,SAAS,CAACM,UAAU,CAAC,CAAC,CAAC;IACtC,MAAMC,MAAM,GAAGL,SAAS,CAACI,UAAU,CAAC,CAAC,CAAC;IAEtC,MAAME,cAAc,GAAG,CAAC,CAAC;IACzB,MAAMC,YAAY,GAAG,CAAC,CAAC;;IAEvB;IACAF,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAACC,IAAI,EAAEC,SAAS,KAAK;MAC3CJ,YAAY,CAACG,IAAI,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAGF,SAAS;IAC9C,CAAC,CAAC;IAEF,MAAMG,iBAAiB,GAAGP,YAAY,CAAC,gBAAgB,CAAC;IACxD,MAAMQ,WAAW,GAAGR,YAAY,CAAC,eAAe,CAAC;IAEjD,IAAI,CAACO,iBAAiB,IAAI,CAACC,WAAW,EAAE;MACpC,OAAOrB,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAiE,CAAC,CAAC;IAC5G;;IAEA;IACAb,MAAM,CAACc,OAAO,CAAC;MAAEC,YAAY,EAAE;IAAM,CAAC,EAAE,CAACC,GAAG,EAAEC,CAAC,KAAK;MAChD,IAAIA,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC;MACrB,MAAMC,KAAK,GAAGF,GAAG,CAACG,OAAO,CAACV,iBAAiB,CAAC,CAACF,IAAI,CAACC,IAAI,CAAC,CAAC;MACxD,MAAMY,OAAO,GAAGJ,GAAG,CAACG,OAAO,CAACT,WAAW,CAAC,CAACH,IAAI,CAACC,IAAI,CAAC,CAAC;MACpD,IAAIU,KAAK,EAAE;QACPjB,cAAc,CAACiB,KAAK,CAAC,GAAGE,OAAO;MACnC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvBvB,MAAM,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAACC,IAAI,EAAEC,SAAS,KAAK;MAC3Ce,YAAY,CAAChB,IAAI,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,GAAGF,SAAS;IAC9C,CAAC,CAAC;IAEF,MAAMgB,SAAS,GAAGD,YAAY,CAAC,eAAe,CAAC;IAC/C,IAAI,CAACC,SAAS,EAAE;MACZ,OAAOjC,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA2C,CAAC,CAAC;IACtF;;IAEA;IACAf,MAAM,CAACyB,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC9BzB,MAAM,CAACK,MAAM,CAAC,CAAC,CAAC,CAACgB,OAAO,CAAC,CAAC,CAAC,CAACK,KAAK,GAAG,eAAe;;IAEnD;IACA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAInB,MAAM,CAAC2B,QAAQ,EAAER,CAAC,EAAE,EAAE;MACvC,MAAMD,GAAG,GAAGlB,MAAM,CAACK,MAAM,CAACc,CAAC,CAAC;MAC5B,MAAMC,KAAK,GAAGF,GAAG,CAACG,OAAO,CAACG,SAAS,GAAG,CAAC,CAAC,CAACf,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MACtDQ,GAAG,CAACG,OAAO,CAAC,CAAC,CAAC,CAACK,KAAK,GAAGvB,cAAc,CAACiB,KAAK,CAAC,IAAI,EAAE;IACtD;IAEA,MAAMQ,UAAU,GAAG9C,IAAI,CAAC+C,IAAI,CAACC,SAAS,EAAE,SAAS,EAAE,aAAa,CAAC;IACjE,MAAMnC,SAAS,CAACG,IAAI,CAACiC,SAAS,CAACH,UAAU,CAAC;IAE1C/C,EAAE,CAACmD,UAAU,CAACxC,SAAS,CAAC;IACxBX,EAAE,CAACmD,UAAU,CAACtC,SAAS,CAAC;IAExBH,GAAG,CAAC0C,QAAQ,CAACL,UAAU,EAAE,qBAAqB,EAAE,MAAM;MAClD/C,EAAE,CAACmD,UAAU,CAACJ,UAAU,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC,CAAC,OAAOM,GAAG,EAAE;IACVC,OAAO,CAACpB,KAAK,CAACmB,GAAG,CAAC;IAClB3C,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACuB,IAAI,CAAC,wBAAwB,CAAC;EAClD;AACJ,CAAC,CAAC;AAEFrD,GAAG,CAACsD,MAAM,CAAC,IAAI,EAAE,MAAMF,OAAO,CAACG,GAAG,CAAC,yCAAyC,CAAC,CAAC;;AAI9E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}